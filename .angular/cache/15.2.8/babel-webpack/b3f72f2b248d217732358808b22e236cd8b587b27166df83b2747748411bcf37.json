{"ast":null,"code":"import { EMPTY } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = \"http://localhost:5000/api/book\";\n  }\n  searchBookByTitle(str) {\n    let req = {\n      \"title\": str\n    };\n    let url = `${this.baseUrl}/search`;\n    return this.http.post(url, req).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  searchBookByAuthor(str) {\n    let req = {\n      \"author\": str\n    };\n    let url = `${this.baseUrl}/search`;\n    console.log(req);\n    return this.http.put(url, req).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  saveBook(book) {\n    let req = {\n      \"book\": book\n    };\n    return this.http.post(this.baseUrl, req).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  getBooks() {\n    return this.http.get(this.baseUrl).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  getBookById(id) {\n    const url = `${this.baseUrl}/${id}`;\n    return this.http.get(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  updateBook(book) {\n    const url = `${this.baseUrl}`;\n    let req = {\n      \"book\": book\n    };\n    return this.http.put(url, req).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  deleteBook(id) {\n    let url = `${this.baseUrl}/${id}`;\n    return this.http.delete(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  errorHandler(e) {\n    alert(e.msg);\n    return EMPTY;\n  }\n}\nBookService.ɵfac = function BookService_Factory(t) {\n  return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n};\nBookService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookService,\n  factory: BookService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"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","names":["EMPTY","catchError","map","BookService","constructor","http","searchBookByTitle","str","req","url","baseUrl","post","pipe","obj","e","errorHandler","searchBookByAuthor","console","log","put","saveBook","book","getBooks","get","getBookById","id","updateBook","deleteBook","delete","alert","msg","factory","providedIn"],"sourceRoot":"","sources":["D:\\Lucas\\25Books\\frontend\\src\\app\\services\\book.service.ts"],"sourcesContent":["import { Book } from '../models/book.model';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { EMPTY, Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class BookService {\n\n  baseUrl = \"http://localhost:5000/api/book\"\n\n  constructor(private http: HttpClient) { }\n\n  searchBookByTitle(str: string): Observable<any>{\n    let req = {\"title\": str}\n    let url = `${this.baseUrl}/search`\n    return this.http.post<Book>(url, req).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  searchBookByAuthor(str: string): Observable<any>{\n    let req = {\"author\": str}\n    let url = `${this.baseUrl}/search`\n    console.log(req)\n    return this.http.put<Book>(url, req).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  saveBook(book: Book): Observable<any> {\n    let req = { \"book\": book }\n    return this.http.post<Book>(this.baseUrl, req).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  getBooks(): Observable<Book[]> {\n    return this.http.get<Book[]>(this.baseUrl).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  getBookById(id: string): Observable<Book> {\n    const url = `${this.baseUrl}/${id}`\n    return this.http.get<Book>(url).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  updateBook(book: Book): Observable<any> {\n    const url = `${this.baseUrl}`\n    let req = { \"book\": book }\n    return this.http.put<Book>(url, req).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  deleteBook(id: string): Observable<any> {\n    let url = `${this.baseUrl}/${id}`\n    return this.http.delete<Book>(url).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  errorHandler(e: any): Observable<any> {\n    alert(e.msg)\n    return EMPTY\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}