{"ast":null,"code":"import { catchError, map } from 'rxjs';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class UserService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = \"http://localhost:5000/api/user\";\n  }\n  saveUser(user) {\n    let req = {\n      \"user\": user\n    };\n    return this.http.post(this.baseUrl, req).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  getUsers() {\n    return this.http.get(this.baseUrl).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  getUserById(id) {\n    const url = `${this.baseUrl}/${id}`;\n    return this.http.get(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  updateUser(user) {\n    const url = `${this.baseUrl}`;\n    let req = {\n      \"user\": user\n    };\n    return this.http.put(url, req).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  deleteBook(id) {\n    let url = `${this.baseUrl}/${id}`;\n    return this.http.delete(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  errorHandler(e) {\n    alert(e.msg);\n    return EMPTY;\n  }\n}\nUserService.ɵfac = function UserService_Factory(t) {\n  return new (t || UserService)(i0.ɵɵinject(i1.HttpClient));\n};\nUserService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: UserService,\n  factory: UserService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAEA,SAAqBA,UAAU,EAAEC,GAAG,QAAQ,MAAM;;;AAMlD,OAAM,MAAOC,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB,YAAO,GAAG,gCAAgC;EAEF;EAExCC,QAAQ,CAACC,IAAU;IACjB,IAAIC,GAAG,GAAG;MAAE,MAAM,EAAED;IAAI,CAAE;IAC1B,OAAO,IAAI,CAACF,IAAI,CAACI,IAAI,CAAO,IAAI,CAACC,OAAO,EAAEF,GAAG,CAAC,CAACG,IAAI,CACjDT,GAAG,CAACU,GAAG,IAAIA,GAAG,CAAC,EACfX,UAAU,CAACY,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAE,QAAQ;IACN,OAAO,IAAI,CAACV,IAAI,CAACW,GAAG,CAAS,IAAI,CAACN,OAAO,CAAC,CAACC,IAAI,CAC7CT,GAAG,CAACU,GAAG,IAAIA,GAAG,CAAC,EACfX,UAAU,CAACY,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAI,WAAW,CAACC,EAAU;IACpB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,IAAIQ,EAAE,EAAE;IACnC,OAAO,IAAI,CAACb,IAAI,CAACW,GAAG,CAAOG,GAAG,CAAC,CAACR,IAAI,CAClCT,GAAG,CAACU,GAAG,IAAIA,GAAG,CAAC,EACfX,UAAU,CAACY,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAO,UAAU,CAACb,IAAU;IACnB,MAAMY,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,EAAE;IAC7B,IAAIF,GAAG,GAAG;MAAE,MAAM,EAAED;IAAI,CAAE;IAC1B,OAAO,IAAI,CAACF,IAAI,CAACgB,GAAG,CAAOF,GAAG,EAAEX,GAAG,CAAC,CAACG,IAAI,CACvCT,GAAG,CAACU,GAAG,IAAIA,GAAG,CAAC,EACfX,UAAU,CAACY,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAS,UAAU,CAACJ,EAAU;IACnB,IAAIC,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,IAAIQ,EAAE,EAAE;IACjC,OAAO,IAAI,CAACb,IAAI,CAACkB,MAAM,CAAOJ,GAAG,CAAC,CAACR,IAAI,CACrCT,GAAG,CAACU,GAAG,IAAIA,GAAG,CAAC,EACfX,UAAU,CAACY,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAC,YAAY,CAACD,CAAM;IACjBW,KAAK,CAACX,CAAC,CAACY,GAAG,CAAC;IACZ,OAAOC,KAAK;EACd;;AAhDWvB,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAwB,SAAXxB,WAAW;EAAAyB,YAFV;AAAM","names":["catchError","map","UserService","constructor","http","saveUser","user","req","post","baseUrl","pipe","obj","e","errorHandler","getUsers","get","getUserById","id","url","updateUser","put","deleteBook","delete","alert","msg","EMPTY","factory","providedIn"],"sourceRoot":"","sources":["D:\\Lucas\\25Books\\frontend\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { HttpClient } from '@angular/common/http';\nimport { Injectable } from '@angular/core';\nimport { Observable, catchError, map } from 'rxjs';\nimport { User } from '../components/user/user.model';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  baseUrl = \"http://localhost:5000/api/user\"\n\n  constructor(private http: HttpClient) { }\n\n  saveUser(user: User): Observable<User> {\n    let req = { \"user\": user }\n    return this.http.post<User>(this.baseUrl, req).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  getUsers(): Observable<User[]> {\n    return this.http.get<User[]>(this.baseUrl).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  getUserById(id: string): Observable<User> {\n    const url = `${this.baseUrl}/${id}`\n    return this.http.get<User>(url).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  updateUser(user: User): Observable<User> {\n    const url = `${this.baseUrl}`\n    let req = { \"user\": user }\n    return this.http.put<User>(url, req).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  deleteBook(id: string): Observable<User> {\n    let url = `${this.baseUrl}/${id}`\n    return this.http.delete<User>(url).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  errorHandler(e: any): Observable<any> {\n    alert(e.msg)\n    return EMPTY\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}