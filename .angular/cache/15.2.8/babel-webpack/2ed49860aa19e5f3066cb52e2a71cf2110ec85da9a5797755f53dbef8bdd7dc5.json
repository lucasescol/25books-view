{"ast":null,"code":"import { EMPTY } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = \"http://localhost:5000/api/book\";\n  }\n  searchBook(str) {\n    let req = {\n      \"title\": str\n    };\n    return this.http.post(this.baseUrl);\n  }\n  saveBook(book) {\n    let req = {\n      \"book\": book\n    };\n    return this.http.post(this.baseUrl, req).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  getBooks() {\n    return this.http.get(this.baseUrl).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  getBookById(id) {\n    const url = `${this.baseUrl}/${id}`;\n    return this.http.get(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  updateBook(book) {\n    const url = `${this.baseUrl}`;\n    let req = {\n      \"book\": book\n    };\n    return this.http.put(url, req).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  deleteBook(id) {\n    let url = `${this.baseUrl}/${id}`;\n    return this.http.delete(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  errorHandler(e) {\n    alert(e.msg);\n    return EMPTY;\n  }\n}\nBookService.ɵfac = function BookService_Factory(t) {\n  return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n};\nBookService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookService,\n  factory: BookService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,KAAK,QAAoB,MAAM;AACxC,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAMhD,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB,YAAO,GAAG,gCAAgC;EAEF;EAExCC,UAAU,CAACC,GAAW;IACpB,IAAIC,GAAG,GAAG;MAAC,OAAO,EAAED;IAAG,CAAC;IACxB,OAAO,IAAI,CAACF,IAAI,CAACI,IAAI,CAAS,IAAI,CAACC,OAAO,CAAC;EAC7C;EAEAC,QAAQ,CAACC,IAAU;IACjB,IAAIJ,GAAG,GAAG;MAAE,MAAM,EAAEI;IAAI,CAAE;IAC1B,OAAO,IAAI,CAACP,IAAI,CAACI,IAAI,CAAO,IAAI,CAACC,OAAO,EAAEF,GAAG,CAAC,CAACK,IAAI,CACjDX,GAAG,CAACY,GAAG,IAAIA,GAAG,CAAC,EACfb,UAAU,CAACc,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAE,QAAQ;IACN,OAAO,IAAI,CAACZ,IAAI,CAACa,GAAG,CAAS,IAAI,CAACR,OAAO,CAAC,CAACG,IAAI,CAC7CX,GAAG,CAACY,GAAG,IAAIA,GAAG,CAAC,EACfb,UAAU,CAACc,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAI,WAAW,CAACC,EAAU;IACpB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACX,OAAO,IAAIU,EAAE,EAAE;IACnC,OAAO,IAAI,CAACf,IAAI,CAACa,GAAG,CAAOG,GAAG,CAAC,CAACR,IAAI,CAClCX,GAAG,CAACY,GAAG,IAAIA,GAAG,CAAC,EACfb,UAAU,CAACc,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAO,UAAU,CAACV,IAAU;IACnB,MAAMS,GAAG,GAAG,GAAG,IAAI,CAACX,OAAO,EAAE;IAC7B,IAAIF,GAAG,GAAG;MAAE,MAAM,EAAEI;IAAI,CAAE;IAC1B,OAAO,IAAI,CAACP,IAAI,CAACkB,GAAG,CAAOF,GAAG,EAAEb,GAAG,CAAC,CAACK,IAAI,CACvCX,GAAG,CAACY,GAAG,IAAIA,GAAG,CAAC,EACfb,UAAU,CAACc,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAS,UAAU,CAACJ,EAAU;IACnB,IAAIC,GAAG,GAAG,GAAG,IAAI,CAACX,OAAO,IAAIU,EAAE,EAAE;IACjC,OAAO,IAAI,CAACf,IAAI,CAACoB,MAAM,CAAOJ,GAAG,CAAC,CAACR,IAAI,CACrCX,GAAG,CAACY,GAAG,IAAIA,GAAG,CAAC,EACfb,UAAU,CAACc,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAC,YAAY,CAACD,CAAM;IACjBW,KAAK,CAACX,CAAC,CAACY,GAAG,CAAC;IACZ,OAAO3B,KAAK;EACd;;AAtDWG,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAyB,SAAXzB,WAAW;EAAA0B,YAHV;AAAM","names":["EMPTY","catchError","map","BookService","constructor","http","searchBook","str","req","post","baseUrl","saveBook","book","pipe","obj","e","errorHandler","getBooks","get","getBookById","id","url","updateBook","put","deleteBook","delete","alert","msg","factory","providedIn"],"sourceRoot":"","sources":["D:\\Lucas\\25Books\\frontend\\src\\app\\services\\book.service.ts"],"sourcesContent":["import { Book } from './../components/book/book.model';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { EMPTY, Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class BookService {\n\n  baseUrl = \"http://localhost:5000/api/book\"\n\n  constructor(private http: HttpClient) { }\n\n  searchBook(str: string): Observable<Book[]>{\n    let req = {\"title\": str}\n    return this.http.post<Book[]>(this.baseUrl)\n  }\n\n  saveBook(book: Book): Observable<Book> {\n    let req = { \"book\": book }\n    return this.http.post<Book>(this.baseUrl, req).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  getBooks(): Observable<Book[]> {\n    return this.http.get<Book[]>(this.baseUrl).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  getBookById(id: string): Observable<Book> {\n    const url = `${this.baseUrl}/${id}`\n    return this.http.get<Book>(url).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  updateBook(book: Book): Observable<Book> {\n    const url = `${this.baseUrl}`\n    let req = { \"book\": book }\n    return this.http.put<Book>(url, req).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  deleteBook(id: string): Observable<Book> {\n    let url = `${this.baseUrl}/${id}`\n    return this.http.delete<Book>(url).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  errorHandler(e: any): Observable<any> {\n    alert(e.msg)\n    return EMPTY\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}