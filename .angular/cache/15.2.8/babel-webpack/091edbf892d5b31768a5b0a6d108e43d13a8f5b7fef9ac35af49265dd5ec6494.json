{"ast":null,"code":"import { __decorate } from \"tslib\";\nimport { Injectable } from '@angular/core';\nlet UserService = class UserService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = \"http://localhost:5000/api/book\";\n  }\n  searchBook(str) {\n    let req = {\n      \"title\": str\n    };\n    let url = `${this.baseUrl}/search`;\n    return this.http.post(url, req).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  saveBook(book) {\n    let req = {\n      \"book\": book\n    };\n    return this.http.post(this.baseUrl, req).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  getBooks() {\n    return this.http.get(this.baseUrl).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  getBookById(id) {\n    const url = `${this.baseUrl}/${id}`;\n    return this.http.get(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  updateBook(book) {\n    const url = `${this.baseUrl}`;\n    let req = {\n      \"book\": book\n    };\n    return this.http.put(url, req).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  deleteBook(id) {\n    let url = `${this.baseUrl}/${id}`;\n    return this.http.delete(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  errorHandler(e) {\n    alert(e.msg);\n    return EMPTY;\n  }\n};\nUserService = __decorate([Injectable({\n  providedIn: 'root'\n})], UserService);\nexport { UserService };","map":{"version":3,"mappings":";AAAA,SAASA,UAAU,QAAQ,eAAe;AAKnC,IAAMC,WAAW,GAAjB,MAAMA,WAAW;EAGtBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB,YAAO,GAAG,gCAAgC;EAEF;EAExCC,UAAU,CAACC,GAAW;IACpB,IAAIC,GAAG,GAAG;MAAC,OAAO,EAAED;IAAG,CAAC;IACxB,IAAIE,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,SAAS;IAClC,OAAO,IAAI,CAACL,IAAI,CAACM,IAAI,CAAOF,GAAG,EAAED,GAAG,CAAC,CAACI,IAAI,CACxCC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAAC,EACfC,UAAU,CAACC,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAE,QAAQ,CAACC,IAAU;IACjB,IAAIX,GAAG,GAAG;MAAE,MAAM,EAAEW;IAAI,CAAE;IAC1B,OAAO,IAAI,CAACd,IAAI,CAACM,IAAI,CAAO,IAAI,CAACD,OAAO,EAAEF,GAAG,CAAC,CAACI,IAAI,CACjDC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAAC,EACfC,UAAU,CAACC,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAI,QAAQ;IACN,OAAO,IAAI,CAACf,IAAI,CAACgB,GAAG,CAAS,IAAI,CAACX,OAAO,CAAC,CAACE,IAAI,CAC7CC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAAC,EACfC,UAAU,CAACC,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAM,WAAW,CAACC,EAAU;IACpB,MAAMd,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,IAAIa,EAAE,EAAE;IACnC,OAAO,IAAI,CAAClB,IAAI,CAACgB,GAAG,CAAOZ,GAAG,CAAC,CAACG,IAAI,CAClCC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAAC,EACfC,UAAU,CAACC,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAQ,UAAU,CAACL,IAAU;IACnB,MAAMV,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,EAAE;IAC7B,IAAIF,GAAG,GAAG;MAAE,MAAM,EAAEW;IAAI,CAAE;IAC1B,OAAO,IAAI,CAACd,IAAI,CAACoB,GAAG,CAAOhB,GAAG,EAAED,GAAG,CAAC,CAACI,IAAI,CACvCC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAAC,EACfC,UAAU,CAACC,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAU,UAAU,CAACH,EAAU;IACnB,IAAId,GAAG,GAAG,GAAG,IAAI,CAACC,OAAO,IAAIa,EAAE,EAAE;IACjC,OAAO,IAAI,CAAClB,IAAI,CAACsB,MAAM,CAAOlB,GAAG,CAAC,CAACG,IAAI,CACrCC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAAC,EACfC,UAAU,CAACC,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAC,YAAY,CAACD,CAAM;IACjBY,KAAK,CAACZ,CAAC,CAACa,GAAG,CAAC;IACZ,OAAOC,KAAK;EACd;CACD;AA1DY3B,WAAW,eAHvBD,UAAU,CAAC;EACV6B,UAAU,EAAE;CACb,CAAC,GACW5B,WAAW,CA0DvB;SA1DYA,WAAW","names":["Injectable","UserService","constructor","http","searchBook","str","req","url","baseUrl","post","pipe","map","obj","catchError","e","errorHandler","saveBook","book","getBooks","get","getBookById","id","updateBook","put","deleteBook","delete","alert","msg","EMPTY","providedIn"],"sourceRoot":"","sources":["D:\\Lucas\\25Books\\frontend\\src\\app\\services\\user.service.ts"],"sourcesContent":["import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class UserService {\n  baseUrl = \"http://localhost:5000/api/book\"\n\n  constructor(private http: HttpClient) { }\n\n  searchBook(str: string): Observable<any>{\n    let req = {\"title\": str}\n    let url = `${this.baseUrl}/search`\n    return this.http.post<Book>(url, req).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  saveBook(book: Book): Observable<Book> {\n    let req = { \"book\": book }\n    return this.http.post<Book>(this.baseUrl, req).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  getBooks(): Observable<Book[]> {\n    return this.http.get<Book[]>(this.baseUrl).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  getBookById(id: string): Observable<Book> {\n    const url = `${this.baseUrl}/${id}`\n    return this.http.get<Book>(url).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  updateBook(book: Book): Observable<Book> {\n    const url = `${this.baseUrl}`\n    let req = { \"book\": book }\n    return this.http.put<Book>(url, req).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  deleteBook(id: string): Observable<Book> {\n    let url = `${this.baseUrl}/${id}`\n    return this.http.delete<Book>(url).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  errorHandler(e: any): Observable<any> {\n    alert(e.msg)\n    return EMPTY\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}