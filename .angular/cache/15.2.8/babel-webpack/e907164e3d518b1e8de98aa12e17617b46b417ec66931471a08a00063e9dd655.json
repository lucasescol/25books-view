{"ast":null,"code":"import { EMPTY } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nexport class BookService {\n  constructor(http) {\n    this.http = http;\n    this.baseUrl = \"http://localhost:5000/api/book\";\n  }\n  saveBook(book) {\n    return this.http.post(this.baseUrl, book).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  getBooks() {\n    return this.http.get(this.baseUrl).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  getBookById(id) {\n    const url = `${this.baseUrl}/${id}`;\n    return this.http.get(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  updateBook(book) {\n    const url = `${this.baseUrl}/${book.id}`;\n    return this.http.put(url, book).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  deleteBook(id) {\n    let url = `${this.baseUrl}/${id}`;\n    return this.http.delete(url).pipe(map(obj => obj), catchError(e => this.errorHandler(e)));\n  }\n  errorHandler(e) {\n    alert(e);\n    return EMPTY;\n  }\n}\nBookService.ɵfac = function BookService_Factory(t) {\n  return new (t || BookService)(i0.ɵɵinject(i1.HttpClient));\n};\nBookService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n  token: BookService,\n  factory: BookService.ɵfac,\n  providedIn: 'root'\n});","map":{"version":3,"mappings":"AAGA,SAASA,KAAK,QAAoB,MAAM;AACxC,SAASC,UAAU,EAAEC,GAAG,QAAQ,gBAAgB;;;AAMhD,OAAM,MAAOC,WAAW;EAItBC,YAAoBC,IAAgB;IAAhB,SAAI,GAAJA,IAAI;IAFxB,YAAO,GAAG,gCAAgC;EAEF;EAExCC,QAAQ,CAACC,IAAU;IACjB,OAAO,IAAI,CAACF,IAAI,CAACG,IAAI,CAAO,IAAI,CAACC,OAAO,EAAEF,IAAI,CAAC,CAACG,IAAI,CAClDR,GAAG,CAACS,GAAG,IAAIA,GAAG,CAAC,EACfV,UAAU,CAACW,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAE,QAAQ;IACN,OAAO,IAAI,CAACT,IAAI,CAACU,GAAG,CAAS,IAAI,CAACN,OAAO,CAAC,CAACC,IAAI,CAC7CR,GAAG,CAACS,GAAG,IAAIA,GAAG,CAAC,EACfV,UAAU,CAACW,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAI,WAAW,CAACC,EAAU;IACpB,MAAMC,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,IAAIQ,EAAE,EAAE;IACnC,OAAO,IAAI,CAACZ,IAAI,CAACU,GAAG,CAAOG,GAAG,CAAC,CAACR,IAAI,CAClCR,GAAG,CAACS,GAAG,IAAIA,GAAG,CAAC,EACfV,UAAU,CAACW,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAO,UAAU,CAACZ,IAAU;IACnB,MAAMW,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,IAAIF,IAAI,CAACU,EAAE,EAAE;IACxC,OAAO,IAAI,CAACZ,IAAI,CAACe,GAAG,CAAOF,GAAG,EAAEX,IAAI,CAAC,CAACG,IAAI,CACxCR,GAAG,CAACS,GAAG,IAAIA,GAAG,CAAC,EACfV,UAAU,CAACW,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAS,UAAU,CAACJ,EAAU;IACnB,IAAIC,GAAG,GAAG,GAAG,IAAI,CAACT,OAAO,IAAIQ,EAAE,EAAE;IACjC,OAAO,IAAI,CAACZ,IAAI,CAACiB,MAAM,CAAOJ,GAAG,CAAC,CAACR,IAAI,CACrCR,GAAG,CAACS,GAAG,IAAIA,GAAG,CAAC,EACfV,UAAU,CAACW,CAAC,IAAI,IAAI,CAACC,YAAY,CAACD,CAAC,CAAC,CAAC,CACtC;EACH;EAEAC,YAAY,CAACD,CAAM;IACjBW,KAAK,CAACX,CAAC,CAAC;IACR,OAAOZ,KAAK;EACd;;AA/CWG,WAAW;mBAAXA,WAAW;AAAA;AAAXA,WAAW;SAAXA,WAAW;EAAAqB,SAAXrB,WAAW;EAAAsB,YAHV;AAAM","names":["EMPTY","catchError","map","BookService","constructor","http","saveBook","book","post","baseUrl","pipe","obj","e","errorHandler","getBooks","get","getBookById","id","url","updateBook","put","deleteBook","delete","alert","factory","providedIn"],"sourceRoot":"","sources":["D:\\Lucas\\25Books\\frontend\\src\\app\\services\\book.service.ts"],"sourcesContent":["import { Book } from './../components/book/book.model';\nimport { Injectable } from '@angular/core';\nimport { HttpClient } from '@angular/common/http';\nimport { EMPTY, Observable } from 'rxjs';\nimport { catchError, map } from 'rxjs/operators';\n\n@Injectable({\n  providedIn: 'root'\n})\n\nexport class BookService {\n\n  baseUrl = \"http://localhost:5000/api/book\"\n\n  constructor(private http: HttpClient) { }\n\n  saveBook(book: Book): Observable<Book> {\n    return this.http.post<Book>(this.baseUrl, book).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  getBooks(): Observable<Book[]> {\n    return this.http.get<Book[]>(this.baseUrl).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  getBookById(id: number): Observable<Book> {\n    const url = `${this.baseUrl}/${id}`\n    return this.http.get<Book>(url).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  updateBook(book: Book): Observable<Book> {\n    const url = `${this.baseUrl}/${book.id}`\n    return this.http.put<Book>(url, book).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  deleteBook(id: number): Observable<Book> {\n    let url = `${this.baseUrl}/${id}`\n    return this.http.delete<Book>(url).pipe(\n      map(obj => obj),\n      catchError(e => this.errorHandler(e))\n    )\n  }\n\n  errorHandler(e: any): Observable<any> {\n    alert(e)\n    return EMPTY\n  }\n}\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}